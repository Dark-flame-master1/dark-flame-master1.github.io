{"meta":{"title":"折老爷的博客","subtitle":"forging meaning, build identity","description":"个人技术博客&日记","author":"折老爷","url":"https://dark-flame-master1.github.io","root":"/"},"pages":[],"posts":[{"title":"学习笔记:mysql增删改查基础语句","slug":"mysql增删改查基础语句","date":"2020-08-24T10:21:11.000Z","updated":"2020-08-24T10:34:30.197Z","comments":true,"path":"2020/08/24/mysql增删改查基础语句/","link":"","permalink":"https://dark-flame-master1.github.io/2020/08/24/mysql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"mysql基础入门语句增： INSERT INTO 表名(字段1, 2, 3) VALUES(&#39;值1&#39;, &#39;2&#39;, &#39;3&#39;) 删: DELETE FROM 表明 WHERE 删除条件 不提供更新条件，则删除所有 改: UPDATE 表名 SET 字段1 = &#39;新值&#39;, 字段2 = &#39;新值&#39; WHERE 更新条件 不提供更新条件，则更新所有 查: SELECT * FROM 表名 WHERE 查询条件 ORDER BY 排序条件 LIMIT 取出数据量 查询条件、排序条件、取出的数据量，均为可选 查询条件WHEREwhere条件，通过where条件来过滤出目标数据 ex1. /*过滤 id = 1 的数据*/ WHERE id = 1 ex2. /*id = 10, 并且age超过18岁*/ WHERE id = 10 AND age&gt;18 ex3. /*id = 10 或 age 超过18岁 */ WHERE id = 10 OR age &gt; 18","categories":[{"name":"mysql","slug":"mysql","permalink":"https://dark-flame-master1.github.io/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://dark-flame-master1.github.io/tags/mysql/"}]},{"title":"免费部署个人博客到远端GitHub","slug":"免费部署个人博客到远端GitHub","date":"2020-08-23T02:53:31.000Z","updated":"2020-08-23T02:54:23.388Z","comments":true,"path":"2020/08/23/免费部署个人博客到远端GitHub/","link":"","permalink":"https://dark-flame-master1.github.io/2020/08/23/%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B0%E8%BF%9C%E7%AB%AFGitHub/","excerpt":"","text":"前言前面的博客我写到怎么样用hexo建立一个自己的博客网站（没看的可以先看前面那个文章地址，）但是它只能运行在本地端口，如果你分享给你的小伙伴他们是打不开的。如果把它部署到服务器上或空间上每个月都会有不菲的支出，所以我今天教大家怎么部署到免费的GitHub上面。 创建GitHub仓库首先登录GitHub然后新建一个repository（部署个人博客的GitHub仓库命名必须要与个人名称相同，否则接下来会出错误）（忽略我这个错误提醒，因为我已经部署过一次了）创建仓库后会跳转到这个界面这时我们GitHub的仓库建立就完成了 安装git部署插件回到命令行中进入博客文件夹内在blog文件目录下输入: C:\\Users\\Markey\\blog&gt; npm install --save hexo-deployer-git 如果不行的话就继续使用淘宝镜像源，输入: C:\\Users\\Markey\\blog&gt; cnpm install --save hexo-deployer-git 静静的等待安装安装完成后进入文件夹打开_config.yml文件进行配置打开文件找到deployment在type后输入’git’，并添加repo和branch两个配置，在repo处填写github仓库地址，在branch处填写master。！！注意！！冒号后面要加空格！！ 部署到远端在命令行中输入 C:\\Users\\Markey\\blog&gt; hexo d 就会自动上传到远端，并要求你填写账户的密码。 但是如果出现了错误提示，解决办法是： 右键桌面打开git bush 在里面输入 $ git config --global user.name &quot;姓名为GitHub上的姓名&quot; $ git config --global user.email &quot;邮箱为GitHub的注册邮箱&quot; 这时再重复第一遍的步骤，回到命令行中输入 hexo d 正常提示输入密码即位成功，输入密码后就会自动向远端推送文件，再次打开GitHub仓库页面就会发现本地blog文件夹中的文件都再GitHub上部署完成 打开个人博客网站的页面这时只要输入仓库名 就可以成功的访问到个人博客的页面了，和你在localhost4000端口上面是一模一样的，如果你觉得这个域名每次都要输入很麻烦很冗长，来看看怎么给这个博客绑定一个自己的个性域名吧 文章链接","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://dark-flame-master1.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dark-flame-master1.github.io/tags/hexo/"},{"name":"Github","slug":"Github","permalink":"https://dark-flame-master1.github.io/tags/Github/"},{"name":"Git","slug":"Git","permalink":"https://dark-flame-master1.github.io/tags/Git/"}]},{"title":"AE2020使用aftercode插件导出MP4格式视频","slug":"AE2020使用aftercode插件导出MP4格式视频","date":"2020-08-18T08:19:03.000Z","updated":"2020-08-19T12:39:30.641Z","comments":true,"path":"2020/08/18/AE2020使用aftercode插件导出MP4格式视频/","link":"","permalink":"https://dark-flame-master1.github.io/2020/08/18/AE2020%E4%BD%BF%E7%94%A8aftercode%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAMP4%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/","excerpt":"","text":"AE2020版本时找不到H.264导出格式怎么办少了H.264格式，我们就只能用avi等格式导出，他们的缺点显而易见，导出体积大，大的夸张，所以我想推荐这个插件给大家，它叫“AfterCodecs”，这个插件可以帮助我们去导出mp4这个格式。 下载Aftercode插件插件获取可以来到这个网址链接 我还是直接把百度云盘链接贴出来吧：链接：https://pan.baidu.com/s/1icX3YtCofanH9k74WV5Dig提取码：lie1（文件体积14MB大概） 安装插件下载好后如下图，我们会得到一个文件夹 解压后打开文件夹中有三个文件，第一个文件是我们会用到的，而这个安装方法对有些人会有效，也会有些人不有效。继续向下看 第一个文件夹不需要打开也不需要动任何东西，复制粘贴到 这个时候再打开我们的AE，在导出界面就可以看到Aftercode的mp4导出格式 如果在导出界面没有找到这个导出格式的话，我推荐可以再复制一份这个文件夹到这个地址 这就是整个操作流程了，如果各位有问题请评论告诉我，我会一一解答的","categories":[{"name":"AfterEffect","slug":"AfterEffect","permalink":"https://dark-flame-master1.github.io/categories/AfterEffect/"}],"tags":[{"name":"AE","slug":"AE","permalink":"https://dark-flame-master1.github.io/tags/AE/"},{"name":"插件","slug":"插件","permalink":"https://dark-flame-master1.github.io/tags/%E6%8F%92%E4%BB%B6/"}]},{"title":"部署在GitHub的个人博客如何绑定个人域名","slug":"GitHub绑定自己的域名","date":"2020-08-17T08:17:18.000Z","updated":"2020-08-17T11:42:38.229Z","comments":true,"path":"2020/08/17/GitHub绑定自己的域名/","link":"","permalink":"https://dark-flame-master1.github.io/2020/08/17/GitHub%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/","excerpt":"","text":"前提是已经搭建好了自己的个人博客如果想要搭建自己的个人博客可以看我的这篇文章 购买域名首先想要绑定域名，总归需要去购买一个属于自己的域名吧，我是在腾讯云上面购买的域名（不是广告） 在腾讯云上搜索域名购买就可以看到一系列的流程，（注意：需要实名认证） 当一切都准备好后，就是下图这个样子 解析域名接下来就是解析域名的环节了，进入到控制台，点击快速添加网站解析，就可以看到该提示 那么IP地址怎么获取呢？ window + R 打开并输入cmd，进入终端后输入 ping + 用户名.github.io （注意：如果显示 ‘ping’ 不是内部或外部命令，也不是可运行的程序或批处理文件。 就需要以管理员身份打开终端） 接下来回到控制台解析域名，添加一条A解析和一条CNAME解析 在项目目录里添加CNAME文件那么解析完成后，在项目目录中 source 文件夹中添加CNAME文件 先用.txt后缀，打开文本编辑器 在里面输入刚刚购买过的个人域名输入后保存关闭 最重要的一步进入GitHub项目中点击setting 在Option里向下翻找到 GitHub Pages custom domain里面输入你申请的个人域名 最后输入个人域名即可链接到个人博客页面啦 注意: 输入原来的 用户名+github.io网址会直接链接到新绑定的域名里例如: 输入dark-flame-master1.github.io 会直接跳转到 www.hzblog.vip 参考网址","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://dark-flame-master1.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://dark-flame-master1.github.io/tags/GitHub/"},{"name":"hexo","slug":"hexo","permalink":"https://dark-flame-master1.github.io/tags/hexo/"}]},{"title":"使用Hexo框架10分钟搭建个人博客","slug":"hexo搭建个人博客","date":"2020-08-16T11:10:20.000Z","updated":"2020-08-19T12:41:14.151Z","comments":true,"path":"2020/08/16/hexo搭建个人博客/","link":"","permalink":"https://dark-flame-master1.github.io/2020/08/16/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"首先是先给大家打个招呼最近看网上看到了很多的的关于搭建博客的视频，我自己也学着自己搭建了一个博客”我自己的博客链接“(欢迎大家来我的博客跟我深入交♂流)，今天我把搭建的过程记录下来写成博客，留下一个纪念，也可以顺便帮助那些想要搭建个人博客的小伙伴们，帮助他们搭建属于自己的博客主页啦，那么废话不多说，现在就开始吧。 环境搭建与安装第一步：安装node.jsnodejs下载地址进入链接地址后点击下载长期支持版。 进入后按照你们自己的系统选择安装包，我这里==使用的是win10系统==，不过mac系统的也可以继续看下去，因为==这两个系统在下文将会使用到的指令非常的相像==，我也会指出那些不一样的地方 下载完之后进行安装，node.js的安装非常简单，只需要一直点击下一步就好了 注意在最后时，==安装完成会你会注意到给出的两个地址==，在安装包其中它不仅下载了==node.js本身==，还安装了一个是==npm包管理器==，而这个它是下文我们使用hexo搭建博客必须使用到的东西。 win + R 打开运行，输入cmd 进入终端 输入node， 如果安装成功则会显示其版本号 那么到这里可能你们会有疑问了，为什么要下载node.js，上面干这么多事情有什么用呢？？！这是因为hexo是在node.js上生成的，所以当我们真正的要开始安装hexo的时候，前面这两个东西是必不可少的 接下来我们就会使用到刚刚安装的npm包管理器来下载hexo了，由于国内镜像源的速度很慢，所以我们先使用npm来安装一个==cnpm==，这是一个淘宝的镜像源，使用说明可以看这里链接。不过我也会在下面说怎么下载。 在终端里输入 ： npm install -g cnpm --registry=https//registry.npm.taobao.org 敲击回车键即可开始下载了。 当安装好cnpm，可以使用上面测试node.js和npm那样的方法，输入cnpm这样的话cnpm也安装好了，接下来就借助cnpm来安装hexo了 在终端输入 cnpm install -g hexo-cli 敲击回车键后就会开始下载。 当安装完成后，我们继续使用 hexo -v 来验证一下安装是否成功好了hexo博客已经安装好了，我们已经离成功不到一半的距离了 那么我们接下来就要为我们的博客建立一个新的文件夹来存放我们所有的配置文件和博客文章了。 输入 md blog 即可在当前目录下创建一个叫blog的文件夹，当然你如果想要去其他的名字，把blog改掉就好了。这时打开文件夹，找到刚才的目录，你就可以找到刚刚建立的blog文件夹 当然更简单的方法，就直接在文件管理器里面右键新建文件夹即可创建。 初始化博客终端里输入 cd blog 进入刚刚新建的文件夹 window 系统里直接输入 hexo init 如果是mac系统则输入 sudo hexo init 回车即可开始初始化 初始化完成后 Window系统输入 dir 查看一下安装初始化完成后，文件夹内都生成了什么东西而mac系统输入 ls -l 即可查看 这些东西我们也可以在文件管理器中直接看到 这些都是hexo为你自动生成的一些最基础的博客框架的东西 启动hexo博客这时候我们一切都准备好了以后，在blog文件夹目录下终端输入 hexo s 即可启动hexo==(tips: hexo s 即为 hexo server)==你会看到以下这时它就自动为你在本地4000的端口上面启动了hexo，这时候复制该网址，输入到浏览器里面就可以访问到我们刚生成的博客。这个时候你的博客就已经搭建好了。 并且上面自己附带了一篇文章叫Hello world，里面教你了如何新建文章和一些基本操作。 新建文章的语法是：在终端cd到博客的文件夹的目录内输入 hexo new &quot;你的博客名字&quot; 这时候它会提示你的这篇新文章的目录地址，上图即为 \\blog1\\source\\_posts\\我的第一篇博客.md 进入到文件夹内，找到刚才的目录直接双击打开它，我这里是使用的vscode hexo里面的博客使用的是markdown语法，直接在这里面写博客就可以了！！ 当然想要写博客还要了解一些markdown的基本语法，大家可以直接去菜鸟教程里的markdown教程去学习 生成博客与发布当我们写完博客了，保存完之后，你登陆localhost:4000的端口网址，你会发现你的文章并没有在上面，因为我们还没有生成你刚写的博客，也没有上传。 最基本的上传文章（或修改更新博客设置）的步骤为： hexo clean 先清理掉hexo之前的缓存（这一切操作都在终端 blog文件夹目录下输入） hexo g hexo g即为hexo generate 为生成，产生之意。它会把我们刚写好的文章生成到博客里面去。 你可以看见自己刚写的那篇文章已经生成了。 这时候我们在使用 hexo s 就可以看到我们刚写的那篇文章啦。 但是在localhost这个端口里面只有我们自己能访问，当然我们的博客写出来肯定是要让别人看的，不然为什么要写博客，这个localhost的端口只是供我们平时测试使用的。 如果大家想看怎么把我们的博客免费的托管到github上去，让别人也可以访问到我们的博客的话，可以来看我这篇文章如何把个人博客托管到GitHub上去 谢谢大家，如果这篇文章帮助到了你们，我很开心","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://dark-flame-master1.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dark-flame-master1.github.io/tags/hexo/"},{"name":"node.js","slug":"node-js","permalink":"https://dark-flame-master1.github.io/tags/node-js/"}]}],"categories":[{"name":"mysql","slug":"mysql","permalink":"https://dark-flame-master1.github.io/categories/mysql/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://dark-flame-master1.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"AfterEffect","slug":"AfterEffect","permalink":"https://dark-flame-master1.github.io/categories/AfterEffect/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://dark-flame-master1.github.io/tags/mysql/"},{"name":"hexo","slug":"hexo","permalink":"https://dark-flame-master1.github.io/tags/hexo/"},{"name":"Github","slug":"Github","permalink":"https://dark-flame-master1.github.io/tags/Github/"},{"name":"Git","slug":"Git","permalink":"https://dark-flame-master1.github.io/tags/Git/"},{"name":"AE","slug":"AE","permalink":"https://dark-flame-master1.github.io/tags/AE/"},{"name":"插件","slug":"插件","permalink":"https://dark-flame-master1.github.io/tags/%E6%8F%92%E4%BB%B6/"},{"name":"GitHub","slug":"GitHub","permalink":"https://dark-flame-master1.github.io/tags/GitHub/"},{"name":"node.js","slug":"node-js","permalink":"https://dark-flame-master1.github.io/tags/node-js/"}]}